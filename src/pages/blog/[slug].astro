---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import { formatDate } from '../../utils/dateUtils';
import type { CollectionEntry } from 'astro:content';
import FAQ from '../../components/FAQ.astro';

// Function to convert park name to slug (matching the Airtable logic)
function parkNameToSlug(parkName: string): string {
  return parkName
    .toLowerCase()
    .replace(/[^a-z0-9\s-]/g, '') // Remove special chars
    .replace(/\s+/g, '-')         // Replace spaces with hyphens
    .replace(/-+/g, '-')          // Replace multiple hyphens with single hyphen
    .trim();
}

// Function to clean tag text
function cleanTag(tag: string): string {
  return tag.replace(/[#"]/g, '').replace(/\{/g, '').replace(/\}/g, '');
}

// Generate static paths for all blog posts
export async function getStaticPaths() {
  const blogEntries = await getCollection('blog', ({ data }) => !data.draft);
  
  return blogEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

// Get the blog post for this page
const { entry } = Astro.props;
const { Content } = await entry.render();

// Generate park link if park field exists
let parkLink = '';
if (entry.data.park) {
  const parkSlug = parkNameToSlug(entry.data.park);
  parkLink = `/parks/${parkSlug}`;
}

// Get related posts (posts with matching tags, excluding current post)
const allPosts = await getCollection('blog', ({ data }) => !data.draft);
const relatedPosts = allPosts
  .filter((post: CollectionEntry<'blog'>) => 
    post.slug !== entry.slug && // Exclude current post
    post.data.tags.some(tag => entry.data.tags.includes(tag)) // Must share at least one tag
  )
  .sort(() => Math.random() - 0.5) // Randomize order
  .slice(0, 3); // Get up to 3 related posts

// Define navigation items (same as main layout)
const mainNavItems = [
  { text: 'Home', url: '/' },
  { text: 'About', url: '/about' },
  { text: 'Parks', url: '/parks' },
  { text: 'Contact', url: '/contact' },
  { text: 'Blog', url: '/blog' },
  { text: 'FAQs', url: '/faqs' }
];
---

<BaseLayout title={`${entry.data.title} - National Park Directory Blog`}>
  <!-- Blog Header with Navigation (override the absolute header) -->
  <header class="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50" style="position: relative !important;">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center py-4">
        <a href="/" class="text-2xl font-bold text-gray-900 hover:text-green-800 transition-colors">
          National Park Directory
        </a>
        
        <!-- Desktop Navigation -->
        <nav class="hidden md:block">
          <ul class="flex space-x-6">
            {mainNavItems.map(item => (
              <li>
                <a 
                  href={item.url} 
                  class="text-gray-700 hover:text-green-800 transition-colors font-medium"
                >
                  {item.text}
                </a>
              </li>
            ))}
          </ul>
        </nav>
        
        <!-- Mobile Menu Button -->
        <button id="mobile-menu-button-blog" class="md:hidden text-gray-700 hover:text-green-800">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
      
      <!-- Mobile Navigation -->
      <div id="mobile-menu-blog" class="hidden md:hidden pb-4">
        <ul class="space-y-2">
          {mainNavItems.map(item => (
            <li>
              <a href={item.url} class="block py-2 text-gray-700 hover:text-green-800 transition-colors font-medium">
                {item.text}
              </a>
            </li>
          ))}
        </ul>
      </div>
    </div>
  </header>

  <!-- Breadcrumb Navigation -->
  <div class="bg-gray-50 py-3">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
      <nav class="flex" aria-label="Breadcrumb">
        <ol class="flex items-center space-x-2 text-sm text-gray-500">
          <li>
            <a href="/" class="hover:text-green-800 transition-colors">Home</a>
          </li>
          <li>
            <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
          </li>
          <li>
            <a href="/blog" class="hover:text-green-800 transition-colors">Blog</a>
          </li>
          <li>
            <svg class="w-4 h-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
            </svg>
          </li>
          <li class="text-gray-900 font-medium truncate max-w-xs">{entry.data.title}</li>
        </ol>
      </nav>
    </div>
  </div>

  <article class="container mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <!-- Article Header -->
    <header class="mb-8 max-w-4xl mx-auto">
      <h1 class="text-3xl md:text-4xl lg:text-5xl font-bold text-gray-900 mb-4 leading-tight">
        {entry.data.title}
      </h1>
      
      <div class="flex flex-wrap items-center text-gray-600 text-sm mb-6 space-x-4">
        <time datetime={typeof entry.data.publishDate === 'string' ? entry.data.publishDate : entry.data.publishDate.toISOString()} class="flex items-center">
          <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 002 2z" />
          </svg>
          {formatDate(entry.data.publishDate)}
        </time>
        <span class="flex items-center">
          <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
          </svg>
          By {entry.data.author}
        </span>
      </div>

      <!-- Tags Section -->
      <div class="flex flex-wrap gap-2 mb-6">
        {entry.data.tags.map((tag: string) => (
          <span class="inline-block bg-green-100 text-green-800 text-xs px-3 py-1 rounded-full font-medium">
            {cleanTag(tag)}
          </span>
        ))}
      </div>

      <!-- Park Link Section -->
      {entry.data.park && parkLink && (
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
          <div class="flex items-center">
            <svg class="w-5 h-5 text-blue-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
            <span class="text-blue-800 font-medium">Featured Park:</span>
          </div>
          <p class="mt-2 text-blue-700">
            Planning a visit? Check out the <a href={parkLink} class="text-blue-800 font-semibold hover:text-blue-900 underline">{entry.data.park}</a> 
            page for visitor info, directions, and what to do when you get there.
          </p>
        </div>
      )}
      
      {entry.data.image && (
        <div class="mb-8">
          <img 
            src={entry.data.image} 
            alt={entry.data.title}
            class="w-full h-64 md:h-96 object-cover rounded-lg shadow-lg"
            data-blog-image="true"
            data-original-path={entry.data.image}
            onload="this.classList.add('image-loaded')"
            onerror="if (!this.src.includes('blog-placeholder.jpg') && !this.src.includes('park-placeholder.svg')) { this.setAttribute('data-failed-src', this.src); this.src='/images/park-placeholder.svg'; this.classList.add('fallback-applied'); }"
          />
        </div>
      )}
      
      <p class="text-xl text-gray-600 leading-relaxed mb-6">
        {entry.data.description}
      </p>
    </header>

    <!-- Article Content -->
    <div class="blog-content max-w-3xl mx-auto">
      <Content />
    </div>

    <!-- FAQ Section -->
    {entry.data.faqs && entry.data.faqs.length > 0 && (
      <div class="max-w-3xl mx-auto">
        <FAQ faqs={entry.data.faqs} />
      </div>
    )}

    <!-- Article Footer -->
    <footer class="max-w-3xl mx-auto mt-12 pt-8 border-t border-gray-200">
      <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center">
        <!-- Share Buttons -->
        <div class="mb-4 sm:mb-0">
          <h3 class="text-lg font-bold text-gray-900 mb-2">Share this article</h3>
          <div class="flex space-x-4">
            <a href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(entry.data.title)}&url=${encodeURIComponent(Astro.url.href)}`} target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:text-blue-700 transition-colors" aria-label="Share on Twitter">
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84" />
              </svg>
            </a>
            <a href={`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(Astro.url.href)}`} target="_blank" rel="noopener noreferrer" class="text-blue-800 hover:text-blue-900 transition-colors" aria-label="Share on Facebook">
              <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                <path fill-rule="evenodd" d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" clip-rule="evenodd" />
              </svg>
            </a>
          </div>
        </div>
        
        <!-- Back to Blog -->
        <div>
          <a 
            href="/blog" 
            class="inline-flex items-center text-green-800 hover:text-green-900 font-medium transition-colors"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
            </svg>
            Back to All Blog Posts
          </a>
        </div>
      </div>
    </footer>

    <!-- Related Posts Section -->
    {relatedPosts.length > 0 && (
      <div class="max-w-4xl mx-auto mt-16">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">Related Articles</h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          {relatedPosts.map((post: CollectionEntry<'blog'>) => (
            <a href={`/blog/${post.slug}`} class="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow">
              {post.data.image && (
                <div class="relative h-40 bg-gray-100">
                  <img 
                    src={post.data.image} 
                    alt={post.data.title}
                    class="w-full h-full object-cover"
                    data-blog-image="true"
                    data-original-path={post.data.image}
                    onload="this.classList.add('image-loaded')"
                    onerror="if (!this.src.includes('blog-placeholder.jpg') && !this.src.includes('park-placeholder.svg')) { this.setAttribute('data-failed-src', this.src); this.src='/images/park-placeholder.svg'; this.classList.add('fallback-applied'); }"
                  />
                </div>
              )}
              <div class="p-4">
                <h3 class="font-bold text-gray-800 mb-2">{post.data.title}</h3>
                <p class="text-sm text-gray-600 line-clamp-2">{post.data.description}</p>
              </div>
            </a>
          ))}
        </div>
      </div>
    )}
  </article>

  <!-- Mobile Menu Script for Blog -->
  <script>
    document.getElementById('mobile-menu-button-blog')?.addEventListener('click', () => {
      const mobileMenu = document.getElementById('mobile-menu-blog');
      mobileMenu?.classList.toggle('hidden');
    });
  </script>

  <style>
    /* Hide the original absolute header */
    body > header {
      display: none !important;
    }
  </style>
</BaseLayout> 
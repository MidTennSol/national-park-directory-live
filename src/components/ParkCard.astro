---
// Define props
interface Props {
  park: {
    id: string;
    name: string;
    description: string;
    summary?: string;
    imageUrl: string;
    wikimediaImages?: string | string[];
    slug: string;
    states: string;
    designation: string;
  };
}

const { park } = Astro.props;

// Log park data for debugging
console.log(`Rendering ParkCard for ${park.name}`);
console.log(`- slug: ${park.slug}`);
console.log(`- imageUrl: ${park.imageUrl}`);
console.log(`- wikimediaImages type: ${typeof park.wikimediaImages}`);

// Ensure slug exists and is valid
const parkSlug = park.slug ? park.slug.trim() : '';
const parkUrl = parkSlug ? `/parks/${parkSlug}` : '/parks';
console.log(`- parkUrl: ${parkUrl}`);

// Fallback image if no image URL is provided
const fallbackImage = "/images/park-placeholder.svg";

// Try to get a usable image
let bestImage = fallbackImage;

// Handle wikimediaImages - check if it's an array of URLs
if (Array.isArray(park.wikimediaImages) && park.wikimediaImages.length > 0) {
  // Find a direct Wikimedia upload URL if available
  const wikiUploadUrl = park.wikimediaImages.find(url => 
    url && typeof url === 'string' && url.includes('upload.wikimedia.org')
  );
  
  if (wikiUploadUrl) {
    bestImage = wikiUploadUrl;
    console.log(`Using Wikimedia upload URL: ${bestImage}`);
  } else {
    // Otherwise use the first image in the array
    const firstImage = park.wikimediaImages[0];
    if (firstImage && typeof firstImage === 'string') {
      bestImage = firstImage;
      console.log(`Using first wikimediaImages item: ${bestImage}`);
    }
  }
} 
// Check if it's a string that might contain multiple URLs
else if (typeof park.wikimediaImages === 'string') {
  if (park.wikimediaImages.includes('upload.wikimedia.org')) {
    // Extract the upload.wikimedia.org URL if present
    const matches = park.wikimediaImages.match(/(https?:\/\/upload\.wikimedia\.org\/[^\s"']+)/g);
    if (matches && matches.length > 0) {
      bestImage = matches[0];
      console.log(`Extracted Wikimedia URL from string: ${bestImage}`);
    } else {
      bestImage = park.wikimediaImages;
      console.log(`Using wikimediaImages string: ${bestImage}`);
    }
  } else {
    bestImage = park.wikimediaImages;
    console.log(`Using wikimediaImages string: ${bestImage}`);
  }
}
// Otherwise try the imageUrl field
else if (park.imageUrl) {
  bestImage = park.imageUrl;
  console.log(`Using imageUrl: ${bestImage}`);
}

// Make sure the URL has a protocol
if (bestImage && bestImage !== fallbackImage && !bestImage.startsWith('http') && !bestImage.startsWith('/')) {
  bestImage = 'https://' + bestImage;
  console.log(`Fixed image URL: ${bestImage}`);
}

// Check if bestImage is valid (contains "http" or "https" or starts with "/")
const isValidImage = bestImage && (bestImage.startsWith('http') || bestImage.startsWith('/'));
if (!isValidImage) {
  bestImage = fallbackImage;
  console.log(`Invalid image URL, using fallback: ${bestImage}`);
}

// Display text
const displayText = park.summary || park.description || '';
---

<div class="bg-white overflow-hidden rounded-lg shadow-md h-full flex flex-col">
  <a href={parkUrl} class="block flex-grow flex flex-col">
    <div class="relative h-48 overflow-hidden bg-green-50">
      <!-- SVG Placeholder -->
      <div class="absolute inset-0 flex items-center justify-center">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="h-16 w-16 text-green-200 fill-current">
          <path d="M22.5,9V7.5h-2V9H22.5z M20.5,14v1.5h2V14H20.5z M18.5,16.5v-2h-2v2H18.5z M18.5,4.5h-2v2h2V4.5z M16.5,16.5v-2h-2 v2H16.5z M16.5,4.5h-2v2h2V4.5z M14.5,16.5v-2h-2v2H14.5z M14.5,4.5h-2v2h2V4.5z M12.5,16.5v-2h-2v2H12.5z M12.5,4.5h-2v2h2 V4.5z M11,20c5,0,9-4,9-9c0-5-4-9-9-9s-9,4-9,9C2,16,6,20,11,20z M10.5,16.5v-2h-2v2H10.5z M10.5,4.5h-2v2h2V4.5z M8.5,16.5 v-2h-2v2H8.5z M5.5,14.5v-2h-2v2H5.5z M7.5,12.5v-2h-2v2H7.5z M8.5,4.5h-2v2h2V4.5z M4.5,11V7.5h-2V11H4.5z"/>
        </svg>
      </div>
      
      <!-- Main Image -->
      <img 
        src={bestImage} 
        alt={`View of ${park.name}`} 
        class="w-full h-full object-cover relative z-10"
        loading="lazy"
        onerror="if (!this.src.includes('park-placeholder.svg')) { this.src='/images/park-placeholder.svg'; this.parentElement.querySelector('div').style.display = 'flex'; }"
        onload="this.parentElement.querySelector('div').style.display = 'none';"
      />
      
      <!-- Labels -->
      <div class="absolute bottom-0 left-0 bg-green-800 text-white px-3 py-1 text-sm z-20">
        {park.designation || 'National Park'}
      </div>
      <div class="absolute top-0 right-0 bg-green-700 text-white px-3 py-1 text-sm z-20">
        {park.states}
      </div>
    </div>
    
    <div class="p-5 flex-grow flex flex-col">
      <h3 class="text-xl font-bold text-gray-900 mb-2">
        {park.name}
      </h3>
      <p class="text-gray-600 mb-4 flex-grow">
        {displayText.length > 120 ? displayText.substring(0, 120) + '...' : displayText}
      </p>
      <div class="flex justify-between items-center mt-auto">
        <span class="text-green-800 font-medium">
          Explore park â†’
        </span>
      </div>
    </div>
  </a>
</div> 
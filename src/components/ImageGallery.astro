---
export interface Props {
  images: string[];
  parkName: string;
}

const { images, parkName } = Astro.props;
---

<div class="image-gallery">
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
    {images.map((image, index) => (
      <div 
        class="gallery-item cursor-pointer relative group overflow-hidden rounded-lg aspect-video bg-gray-100"
        data-index={index}
      >
        <img 
          src={image} 
          alt={`${parkName} - Image ${index + 1}`}
          class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
          loading="lazy"
          onerror="this.style.display='none'; this.parentElement.style.display='none';"
        />
        <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-colors duration-300 flex items-center justify-center">
          <svg class="w-8 h-8 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"></path>
          </svg>
        </div>
      </div>
    ))}
  </div>

  <!-- Lightbox Modal -->
  <div id="lightbox" class="fixed inset-0 bg-black bg-opacity-90 z-50 hidden flex items-center justify-center p-4">
    <div class="relative max-w-7xl max-h-full w-full h-full flex items-center justify-center">
      <!-- Close Button -->
      <button 
        id="lightbox-close"
        class="absolute top-4 right-4 text-white hover:text-gray-300 z-10"
      >
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>

      <!-- Previous Button -->
      <button 
        id="lightbox-prev"
        class="absolute left-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 z-10"
      >
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>

      <!-- Next Button -->
      <button 
        id="lightbox-next"
        class="absolute right-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 z-10"
      >
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>

      <!-- Main Image -->
      <img 
        id="lightbox-image"
        class="max-w-full max-h-full object-contain"
        alt=""
      />

      <!-- Image Counter -->
      <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white bg-black bg-opacity-50 px-3 py-1 rounded">
        <span id="lightbox-counter">1 / {images.length}</span>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  function initImageGallery() {
    console.log('üñºÔ∏è ImageGallery v4.0 - Initializing image gallery...');
    console.log('üîç Current time:', new Date().toISOString());
    
    // First check if gallery exists
    const galleryContainer = document.querySelector('.image-gallery');
    if (!galleryContainer) {
      console.log('‚ùå No image gallery container found');
      return;
    }
    console.log('‚úÖ Found gallery container:', galleryContainer);
    
    // Gallery state
    let currentImageIndex = 0;
    let galleryImages = [];

    // Initialize gallery
    function initializeGallery() {
      console.log('Setting up gallery...');
      const galleryItems = document.querySelectorAll('.gallery-item img');
      console.log('Found gallery items:', galleryItems.length);
      
      galleryImages = Array.from(galleryItems).map((img) => ({
        src: img.src,
        alt: img.alt
      }));
      console.log('Gallery images prepared:', galleryImages.length);

      // Add click listeners to gallery items
      const galleryContainers = document.querySelectorAll('.gallery-item');
      console.log('Found gallery containers:', galleryContainers.length);
      
      galleryContainers.forEach((item, index) => {
        console.log('Adding click listener to item', index);
        item.addEventListener('click', function(e) {
          console.log('Gallery item clicked:', index);
          e.preventDefault();
          e.stopPropagation();
          openLightbox(index);
        });
        item.style.cursor = 'pointer';
      });

      // Add click listeners to lightbox controls
      const closeBtn = document.getElementById('lightbox-close');
      const prevBtn = document.getElementById('lightbox-prev');
      const nextBtn = document.getElementById('lightbox-next');

      if (closeBtn) {
        closeBtn.addEventListener('click', closeLightbox);
        console.log('Close button listener added');
      }
      if (prevBtn) {
        prevBtn.addEventListener('click', previousImage);
        console.log('Previous button listener added');
      }
      if (nextBtn) {
        nextBtn.addEventListener('click', nextImage);
        console.log('Next button listener added');
      }
    }

    function openLightbox(index) {
      console.log('Opening lightbox for image:', index);
      if (galleryImages.length === 0) {
        console.log('No gallery images, initializing...');
        initializeGallery();
      }
      
      currentImageIndex = index;
      const lightbox = document.getElementById('lightbox');
      const lightboxImage = document.getElementById('lightbox-image');
      const counter = document.getElementById('lightbox-counter');
      
      console.log('Lightbox elements:', {
        lightbox: !!lightbox,
        lightboxImage: !!lightboxImage,
        counter: !!counter,
        hasImage: !!galleryImages[index]
      });
      
      if (lightbox && lightboxImage && counter && galleryImages[index]) {
        lightboxImage.src = galleryImages[index].src;
        lightboxImage.alt = galleryImages[index].alt;
        counter.textContent = `${index + 1} / ${galleryImages.length}`;
        lightbox.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
        console.log('Lightbox opened successfully');
      } else {
        console.error('Failed to open lightbox - missing elements or image');
      }
    }

    function closeLightbox() {
      console.log('Closing lightbox');
      const lightbox = document.getElementById('lightbox');
      if (lightbox) {
        lightbox.classList.add('hidden');
        document.body.style.overflow = 'auto';
      }
    }

    function nextImage() {
      if (galleryImages.length === 0) return;
      currentImageIndex = (currentImageIndex + 1) % galleryImages.length;
      openLightbox(currentImageIndex);
    }

    function previousImage() {
      if (galleryImages.length === 0) return;
      currentImageIndex = (currentImageIndex - 1 + galleryImages.length) % galleryImages.length;
      openLightbox(currentImageIndex);
    }

    // Keyboard navigation
    document.addEventListener('keydown', function(e) {
      const lightbox = document.getElementById('lightbox');
      if (lightbox && !lightbox.classList.contains('hidden')) {
        switch(e.key) {
          case 'Escape':
            closeLightbox();
            break;
          case 'ArrowLeft':
            previousImage();
            break;
          case 'ArrowRight':
            nextImage();
            break;
        }
      }
    });

    // Close lightbox when clicking outside the image
    document.addEventListener('click', function(e) {
      const lightbox = document.getElementById('lightbox');
      if (lightbox && e.target === lightbox && !lightbox.classList.contains('hidden')) {
        closeLightbox();
      }
    });

    // Initialize the gallery
    initializeGallery();
  }

  // Add visible indicator that script loaded
  console.log('üöÄ ImageGallery script loaded successfully!');
  
  // Run when DOM is ready
  if (document.readyState === 'loading') {
    console.log('‚è≥ DOM still loading, adding DOMContentLoaded listener');
    document.addEventListener('DOMContentLoaded', initImageGallery);
  } else {
    console.log('‚úÖ DOM already ready, initializing immediately');
    initImageGallery();
  }
</script>

<style>
  .image-gallery .gallery-item {
    transition: transform 0.2s ease;
  }
  
  .image-gallery .gallery-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }
  
  #lightbox {
    backdrop-filter: blur(8px);
  }
  
  #lightbox-image {
    transition: opacity 0.3s ease;
  }
</style> 
---
export interface Props {
  images: string[];
  parkName: string;
}

const { images, parkName } = Astro.props;
---

<div class="image-gallery">
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
    {images.map((image, index) => (
      <div 
        class="gallery-item cursor-pointer relative group overflow-hidden rounded-lg aspect-video bg-gray-100"
        data-index={index}
        onclick={`openLightbox(${index})`}
      >
        <img 
          src={image} 
          alt={`${parkName} - Image ${index + 1}`}
          class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
          loading="lazy"
          onerror="this.style.display='none'; this.parentElement.style.display='none';"
        />
        <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-colors duration-300 flex items-center justify-center">
          <svg class="w-8 h-8 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"></path>
          </svg>
        </div>
      </div>
    ))}
  </div>

  <!-- Lightbox Modal -->
  <div id="lightbox" class="fixed inset-0 bg-black bg-opacity-90 z-50 hidden flex items-center justify-center p-4">
    <div class="relative max-w-7xl max-h-full w-full h-full flex items-center justify-center">
      <!-- Close Button -->
      <button 
        id="lightbox-close"
        class="absolute top-4 right-4 text-white hover:text-gray-300 z-10"
        onclick="closeLightbox()"
      >
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>

      <!-- Previous Button -->
      <button 
        id="lightbox-prev"
        class="absolute left-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 z-10"
        onclick="previousImage()"
      >
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
      </button>

      <!-- Next Button -->
      <button 
        id="lightbox-next"
        class="absolute right-4 top-1/2 transform -translate-y-1/2 text-white hover:text-gray-300 z-10"
        onclick="nextImage()"
      >
        <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
      </button>

      <!-- Main Image -->
      <img 
        id="lightbox-image"
        class="max-w-full max-h-full object-contain"
        alt=""
      />

      <!-- Image Counter -->
      <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 text-white bg-black bg-opacity-50 px-3 py-1 rounded">
        <span id="lightbox-counter">1 / {images.length}</span>
      </div>
    </div>
  </div>
</div>

<script>
  // Global variables for lightbox
  let currentImageIndex = 0;
  let galleryImages: {src: string, alt: string}[] = [];

  // Initialize gallery
  function initializeGallery() {
    const galleryItems = document.querySelectorAll<HTMLImageElement>('.gallery-item img');
    galleryImages = Array.from(galleryItems).map((img) => ({
      src: img.src,
      alt: img.alt
    }));
  }

  function openLightbox(index: number) {
    if (galleryImages.length === 0) initializeGallery();
    
    currentImageIndex = index;
    const lightbox = document.getElementById('lightbox');
    const lightboxImage = document.getElementById('lightbox-image');
    const counter = document.getElementById('lightbox-counter');
    
    if (lightbox && lightboxImage && counter) {
      lightboxImage.src = galleryImages[index].src;
      lightboxImage.alt = galleryImages[index].alt;
      counter.textContent = `${index + 1} / ${galleryImages.length}`;
      lightbox.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    }
  }

  function closeLightbox() {
    const lightbox = document.getElementById('lightbox');
    if (lightbox) {
      lightbox.classList.add('hidden');
      document.body.style.overflow = 'auto';
    }
  }

  function nextImage() {
    if (galleryImages.length === 0) return;
    currentImageIndex = (currentImageIndex + 1) % galleryImages.length;
    openLightbox(currentImageIndex);
  }

  function previousImage() {
    if (galleryImages.length === 0) return;
    currentImageIndex = (currentImageIndex - 1 + galleryImages.length) % galleryImages.length;
    openLightbox(currentImageIndex);
  }

  // Keyboard navigation
  document.addEventListener('keydown', function(e) {
    const lightbox = document.getElementById('lightbox');
    if (lightbox && !lightbox.classList.contains('hidden')) {
      switch(e.key) {
        case 'Escape':
          closeLightbox();
          break;
        case 'ArrowLeft':
          previousImage();
          break;
        case 'ArrowRight':
          nextImage();
          break;
      }
    }
  });

  // Close lightbox when clicking outside the image
  document.addEventListener('click', function(e) {
    const lightbox = document.getElementById('lightbox');
    const lightboxImage = document.getElementById('lightbox-image');
    if (lightbox && e.target === lightbox && !lightbox.classList.contains('hidden')) {
      closeLightbox();
    }
  });

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initializeGallery);
</script>

<style>
  .image-gallery .gallery-item {
    transition: transform 0.2s ease;
  }
  
  .image-gallery .gallery-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }
  
  #lightbox {
    backdrop-filter: blur(8px);
  }
  
  #lightbox-image {
    transition: opacity 0.3s ease;
  }
</style> 
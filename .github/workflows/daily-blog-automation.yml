name: Daily Blog Post Generation

on:
  # Run daily at 7:00 AM UTC (3:00 AM EST / 2:00 AM CDT)
  schedule:
    - cron: '0 7 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      park_id:
        description: 'Specific park ID to generate blog for (optional)'
        required: false
        type: string
      topic:
        description: 'Blog topic theme (optional)'
        required: false
        type: string
        default: 'complete visitor guide'

# Add permissions for the workflow
permissions:
  contents: write
  actions: read

env:
  NODE_VERSION: '18'

jobs:
  generate-blog-post:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Use PAT token for authentication if available, fallback to GITHUB_TOKEN
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        echo "✅ Dependencies installed successfully"
    
    - name: Verify environment variables
      run: |
        if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
          echo "❌ OPENAI_API_KEY secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.AIRTABLE_API_KEY }}" ]; then
          echo "❌ AIRTABLE_API_KEY secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.AIRTABLE_BASE_ID }}" ]; then
          echo "❌ AIRTABLE_BASE_ID secret is not set"
          exit 1
        fi
        echo "✅ All required secrets are configured"
    
    - name: Test Airtable connection
      env:
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
      run: |
        echo "🔗 Testing Airtable connection..."
        node -e "
          import('./src/blog-automation/airtable-connector.js').then(async (module) => {
            try {
              const result = await module.testConnection();
              if (result.success) {
                console.log('✅ Airtable connection test passed');
                console.log(\`📊 Found \${result.totalParks} parks in database\`);
              } else {
                console.error('❌ Airtable connection test failed:', result.error);
                process.exit(1);
              }
            } catch (error) {
              console.error('❌ Airtable test error:', error.message);
              process.exit(1);
            }
          });
        "
    
    - name: Test OpenAI connection
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "🤖 Testing OpenAI connection..."
        node -e "
          import('./src/blog-automation/ai-content-generator.js').then(async (module) => {
            try {
              const result = await module.testAIConnection();
              if (result.success) {
                console.log('✅ OpenAI connection test passed');
                console.log(\`🧠 Model: \${result.model}\`);
              } else {
                console.error('❌ OpenAI connection test failed:', result.error);
                process.exit(1);
              }
            } catch (error) {
              console.error('❌ OpenAI test error:', error.message);
              process.exit(1);
            }
          });
        "
    
    - name: Generate blog post
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
        PARK_ID: ${{ github.event.inputs.park_id }}
        TOPIC: ${{ github.event.inputs.topic }}
      run: |
        echo "📝 Generating daily blog post..."
        
        # Run the blog generation with enhanced error handling
        if [ -n "$PARK_ID" ]; then
          echo "🎯 Generating blog for specific park ID: $PARK_ID"
          node src/blog-automation/daily-blog-generator.js --park-id="$PARK_ID" --topic="$TOPIC"
        else
          echo "🎲 Generating blog for next available park"
          node src/blog-automation/daily-blog-generator.js --topic="$TOPIC"
        fi
        
        # Check if blog was generated
        if [ $? -eq 0 ]; then
          echo "✅ Blog post generated successfully"
        else
          echo "❌ Blog generation failed"
          exit 1
        fi
    
    - name: Check for changes
      id: check_changes
      run: |
        git add .
        if git diff --cached --quiet; then
          echo "📭 No new blog post generated (no parks available or other issue)"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "📄 New blog post detected"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          
          # Get the name of the generated blog file
          NEW_FILE=$(git diff --cached --name-only | grep "src/content/blog/" | head -1)
          if [ -n "$NEW_FILE" ]; then
            echo "blog_file=$NEW_FILE" >> $GITHUB_OUTPUT
            echo "📝 Generated file: $NEW_FILE"
          fi
        fi
    
    - name: Commit and push changes
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Blog Automation"
        
        # Get current date for commit message
        CURRENT_DATE=$(date "+%Y-%m-%d")
        
        # Create descriptive commit message
        if [ -n "${{ steps.check_changes.outputs.blog_file }}" ]; then
          BLOG_NAME=$(basename "${{ steps.check_changes.outputs.blog_file }}" .md | sed 's/^[0-9-]*-//')
          git commit -m "🤖 Auto-generated blog post: $BLOG_NAME ($CURRENT_DATE)

          - Generated via GitHub Actions automation
          - 600-1200 word comprehensive travel guide
          - SEO optimized with geographic targeting
          - Updated Airtable tracking records
          
          Generated file: ${{ steps.check_changes.outputs.blog_file }}"
        else
          git commit -m "🤖 Auto-generated daily blog post ($CURRENT_DATE)"
        fi
        
        echo "📤 Pushing changes to repository..."
        git push
        
        echo "✅ Blog post successfully published!"
        echo "🚀 Site will auto-deploy via Vercel"
    
    - name: Get blog stats
      if: steps.check_changes.outputs.has_changes == 'true'
      env:
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
      run: |
        echo "📊 Getting updated blog statistics..."
        node -e "
          import('./src/blog-automation/airtable-connector.js').then(async (module) => {
            try {
              const stats = await module.getBlogStats();
              console.log('📈 Updated Blog Statistics:');
              console.log(\`   Total Parks: \${stats.totalParks}\`);
              console.log(\`   Blogs Generated: \${stats.blogsGenerated}\`);
              console.log(\`   Remaining Parks: \${stats.remainingParks}\`);
              console.log(\`   Last Generated: \${stats.lastGenerated || 'N/A'}\`);
            } catch (error) {
              console.log('⚠️ Could not fetch updated stats:', error.message);
            }
          });
        "
    
    - name: Deployment notification
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        echo "🎉 Blog Automation Success!"
        echo "   ✅ New blog post generated and published"
        echo "   🚀 Vercel will automatically deploy the changes"
        echo "   🌐 New blog post will be live within 2-3 minutes"
        echo "   📝 Blog file: ${{ steps.check_changes.outputs.blog_file }}"
    
    - name: No content notification
      if: steps.check_changes.outputs.has_changes == 'false'
      run: |
        echo "📭 No new blog post generated today"
        echo "   This could mean:"
        echo "   • All parks already have blog posts"
        echo "   • Connection issues with Airtable or OpenAI"
        echo "   • No parks match the current selection criteria"
        echo "   Check the logs above for more details"

  # Optional: Create a follow-up job for notifications (Slack, Discord, etc.)
  notify-completion:
    needs: generate-blog-post
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Workflow completion notification
      run: |
        if [ "${{ needs.generate-blog-post.result }}" == "success" ]; then
          echo "✅ Daily blog automation completed successfully"
        else
          echo "❌ Daily blog automation encountered issues"
          echo "Check the generate-blog-post job logs for details"
        fi 
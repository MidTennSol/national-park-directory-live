name: Daily Blog Post Generation

# Force update

on:
  # Run daily at 7:00 AM UTC (3:00 AM EST / 2:00 AM CDT)
  schedule:
    - cron: '0 7 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      park_id:
        description: 'Specific park ID to generate blog for (optional)'
        required: false
        type: string
      topic:
        description: 'Blog topic theme (optional)'
        required: false
        type: string
        default: 'complete visitor guide'

# Add permissions for the workflow
permissions:
  contents: write
  actions: read

env:
  NODE_VERSION: '18'

jobs:
  generate-blog-post:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # Use PAT token for authentication if available, fallback to GITHUB_TOKEN
        token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        echo "✅ Dependencies installed successfully"
    
    - name: Verify environment variables
      run: |
        if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
          echo "❌ OPENAI_API_KEY secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.AIRTABLE_API_KEY }}" ]; then
          echo "❌ AIRTABLE_API_KEY secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.AIRTABLE_BASE_ID }}" ]; then
          echo "❌ AIRTABLE_BASE_ID secret is not set"
          exit 1
        fi
        echo "✅ All required secrets are configured"
    
    - name: Test Airtable connection
      env:
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
      run: |
        echo "🔗 Testing Airtable connection..."
        node -e "
          import('./src/blog-automation/airtable-connector.js').then(async (module) => {
            try {
              const result = await module.testConnection();
              if (result.success) {
                console.log('✅ Airtable connection test passed');
                console.log(\`📊 Found \${result.totalParks} parks in database\`);
              } else {
                console.error('❌ Airtable connection test failed:', result.error);
                process.exit(1);
              }
            } catch (error) {
              console.error('❌ Airtable test error:', error.message);
              process.exit(1);
            }
          });
        "
    
    - name: Test OpenAI connection
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "🤖 Testing OpenAI connection..."
        node -e "
          import('./src/blog-automation/ai-content-generator.js').then(async (module) => {
            try {
              const result = await module.testAIConnection();
              if (result.success) {
                console.log('✅ OpenAI connection test passed');
                console.log(\`🧠 Model: \${result.model}\`);
              } else {
                console.error('❌ OpenAI connection test failed:', result.error);
                process.exit(1);
              }
            } catch (error) {
              console.error('❌ OpenAI test error:', error.message);
              process.exit(1);
            }
          });
        "
    
    - name: Generate blog post
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
        PARK_ID: ${{ github.event.inputs.park_id }}
        TOPIC: ${{ github.event.inputs.topic }}
      run: |
        echo "📝 Generating dual blog posts (current + historical)..."
        echo "🔄 Using dual generation mode for maximum content velocity"
        
        # Run the dual blog generation
        if [ -n "$PARK_ID" ]; then
          echo "⚠️ Manual park selection not supported in dual mode"
          echo "🎲 Proceeding with automatic dual park selection"
        fi
        
        echo "🚀 Starting dual blog generation..."
        node src/blog-automation/daily-blog-generator.js --topic="${TOPIC:-complete visitor guide}"
        
        # Check if blog generation was successful
        if [ $? -eq 0 ]; then
          echo "✅ Dual blog posts generated successfully"
        else
          echo "❌ Dual blog generation failed"
          exit 1
        fi

    - name: List blog directory after generation
      run: |
        echo "📂 Listing contents of src/content/blog/ after generation:"
        ls -l src/content/blog/
    
    - name: Check for changes
      id: check_changes
      run: |
        git add .
        if git diff --cached --quiet; then
          echo "📭 No new blog posts generated (no parks available or other issue)"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "📄 New blog posts detected"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          # Get the names of generated blog files
          NEW_FILES=$(git diff --cached --name-only | grep "src/content/blog/" | tr '\n' ' ')
          FILE_COUNT=$(git diff --cached --name-only | grep "src/content/blog/" | wc -l)
          if [ -n "$NEW_FILES" ]; then
            echo "blog_files=$NEW_FILES" >> $GITHUB_OUTPUT
            echo "file_count=$FILE_COUNT" >> $GITHUB_OUTPUT
            echo "📝 Generated files: $NEW_FILES"
            echo "📊 Total files: $FILE_COUNT"
          fi
        fi

    - name: Show git status and staged files (always)
      run: |
        git status
        git diff --cached --name-status

    - name: Show staged files before commit
      if: steps.check_changes.outputs.has_changes == 'true'
      run: git diff --cached --name-status

    - name: Commit and push changes
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Blog Automation"
        
        # Get current date for commit message
        CURRENT_DATE=$(date "+%Y-%m-%d")
        FILE_COUNT="${{ steps.check_changes.outputs.file_count }}"
        
        # Create descriptive commit message for dual generation
        if [ "$FILE_COUNT" = "2" ]; then
          git commit -m "🤖 Auto-generated DUAL blog posts ($CURRENT_DATE)

          - Generated via GitHub Actions dual automation
          - 2 comprehensive travel guides (current + historical)
          - SEO optimized with geographic targeting
          - Updated Airtable tracking records
          
          Generated files:
          ${{ steps.check_changes.outputs.blog_files }}"
        elif [ "$FILE_COUNT" = "1" ]; then
          # Fallback for single file
          BLOG_NAME=$(basename "${{ steps.check_changes.outputs.blog_files }}" .md | sed 's/^[0-9-]*-//')
          git commit -m "🤖 Auto-generated blog post: $BLOG_NAME ($CURRENT_DATE)

          - Generated via GitHub Actions automation
          - 600-1200 word comprehensive travel guide
          - SEO optimized with geographic targeting
          - Updated Airtable tracking records
          
          Generated file: ${{ steps.check_changes.outputs.blog_files }}"
        else
          git commit -m "🤖 Auto-generated blog posts ($CURRENT_DATE)

          - Generated via GitHub Actions automation
          - Multiple comprehensive travel guides
          - SEO optimized with geographic targeting
          - Updated Airtable tracking records
          
          Generated files: $FILE_COUNT"
        fi
        
        echo "📤 Pushing changes to repository..."
        git push
        
        echo "✅ Blog posts successfully published!"
        echo "🚀 Site will auto-deploy via Vercel"
    
    - name: Get blog stats
      if: steps.check_changes.outputs.has_changes == 'true'
      env:
        AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
        AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
      run: |
        echo "📊 Getting updated blog statistics..."
        node -e "
          import('./src/blog-automation/airtable-connector.js').then(async (module) => {
            try {
              const stats = await module.getBlogStats();
              console.log('📈 Updated Blog Statistics:');
              console.log(\`   Total Parks: \${stats.totalParks}\`);
              console.log(\`   Blogs Generated: \${stats.blogsGenerated}\`);
              console.log(\`   Remaining Parks: \${stats.remainingParks}\`);
              console.log(\`   Last Generated: \${stats.lastGenerated || 'N/A'}\`);
            } catch (error) {
              console.log('⚠️ Could not fetch updated stats:', error.message);
            }
          });
        "
    
    - name: Deployment notification
      if: steps.check_changes.outputs.has_changes == 'true'
      run: |
        echo "🎉 Blog automation completed successfully!"
        echo "📊 Generated ${{ steps.check_changes.outputs.file_count }} new blog post(s)"
        echo "🔄 Vercel deployment will start automatically"
        echo "⏰ Next run scheduled for tomorrow at 7:00 AM UTC" 
<<<<<<< HEAD

# Force update for debug step
=======
>>>>>>> 686d5883b49520409903106283c98f2b3e22e36a
